# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z8RfBicw0uCDET2dEndWPHmentnohKxQ
"""

import numpy as np
import cv2

'''img = cv2.imread('peppers-large.tiff')
img = img/255
img = img.reshape(-1,3)
img.shape
K = 16'''

class Kmeans:

  def __init__(self,K):
    self.K = K

  def assign_centroid(self,im,centroid):
    m = centroid.shape[0]
    idx = np.zeros((im.shape[0],m))
    for i in range(m):
      idx[:,i] = np.linalg.norm(im-centroid[i],axis=1)

    return np.argmin(idx,axis=1)

  def update_centroid(self,im,idx):
    centroid = np.zeros((self.K,3))
    for i in range(self.K):
      idx1 = np.where(idx==i)
      centroid[i] = np.mean(im[idx1],axis=0)

    return centroid

  def fit(self,im,max_iter):
    prev_centroid = None
    centroid = im[np.random.randint(0,im.shape[0],self.K)]
    idx = np.zeros(im.shape[0])
    for i in range(max_iter):
      prev_centroid = centroid
      idx = self.assign_centroid(im,centroid)
      centroid = self.update_centroid(im,idx)

      if i>0:
        if np.sum(np.linalg.norm(centroid-prev_centroid)) < 0.0001:
          break

    return idx , centroid

'''kmeans = Kmeans(K)
index1 , centroid = kmeans.fit(img,500)
img_compressed = img.copy()
for i in range(0,K):
  img_compressed[(index1==i).ravel(),:] = centroid[i]
img = img.reshape(512,512,3)'''

'''plt.imshow(img[:,:,[2,1,0]])
plt.imshow(img_compressed[:,:,[2,1,0]])'''

