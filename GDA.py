# -*- coding: utf-8 -*-
"""20ME10063_subtask4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12adPNtAk1xpPIn_inrZe-JFdtda27l5_
"""

import numpy as np
import pandas as pd
from google.colab import files
import io
data_to_load = files.upload()
import copy

class GDA:

  def __init__(self,X,Y):
    self.X = X
    self.Y = Y

  def phip(self,Y):
    return Y.mean()

  def mun(self,X,Y):
    mu0 = X[Y==0].mean(axis=0)
    mu1 = X[Y==1].mean(axis=0)
    mu = np.array([mu0,mu1])
    return mu

  def sigma(self,X,Y):
    mu = self.mun(X,Y)
    X_sig = X.copy()
    X_sig[Y==0] = X_sig[Y==0]-mu[0]
    X_sig[Y==1] = X_sig[Y==1]-mu[1]
    return (X_sig.T.dot(X_sig))/len(Y)

  def fit(self,X,Y):
    phi = self.phip(Y)
    mu = self.mun(X,Y)
    sig = self.sigma(X,Y)
    invsig = np.linalg.pinv(sig)
    self.theta = -((mu[0]-mu[1]).T.dot(invsig))
    self.theta0 = -(-0.5*(np.dot(mu[0], invsig).dot(mu[0]) - np.dot(mu[1], invsig).dot(mu[1])) - np.log((1.0 -phi)/phi))

  def prob(self,X):
      prob = []
      predictions = np.zeros(X.shape[0])

      for x in X:
        z = np.dot(self.theta.T,x)+self.theta0
        sigmoid = 1/(1+np.exp(-z))
        prob.append(sigmoid)

      for i in range(X.shape[0]):
        if prob[i]>=0.5:
          predictions[i]=1

      return predictions,prob

train1 = pd.read_csv(io.BytesIO(data_to_load['ds1_train.csv']))
test1 = pd.read_csv(io.BytesIO(data_to_load['ds1_test.csv']))
train2 = pd.read_csv(io.BytesIO(data_to_load['ds2_train.csv']))
test2 = pd.read_csv(io.BytesIO(data_to_load['ds2_test.csv']))

"""Dataset 1"""

x_train1 = np.array(train1[['x_1','x_2']])
y_train1 = train1['y']
x_test1 = np.array(test1[['x_1','x_2']])
y_test1 = test1['y']

gda = GDA(x_train1,y_train1)
gda.fit(x_train1,y_train1)

train_predict1,prob_train1 = gda.prob(x_train1)
test_predict1,prob_test1 = gda.prob(x_test1)

print('trainig accuracy:{}'.format(sum(train_predict1==y_train1)/y_train1.shape[0]))
print('test accuracy:{}'.format(sum(test_predict1==y_test1)/y_test1.shape[0]))

"""Dataset 2"""

x_train2 = np.array(train2[['x_1','x_2']])
y_train2 = train2['y']
x_test2 = np.array(test2[['x_1','x_2']])
y_test2 = test2['y']

gda1 = GDA(x_train2,y_train2)
gda1.fit(x_train2,y_train2)

train_predict2,prob_train2 = gda1.prob(x_train2)
test_predict2,prob_test2 = gda1.prob(x_test2)

print('trainig accuracy:{}'.format(sum(train_predict2==y_train2)/y_train2.shape[0]))
print('test accuracy:{}'.format(sum(test_predict2==y_test2)/y_test2.shape[0]))

