# -*- coding: utf-8 -*-
"""20ME10063_subtask2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hUmO4L9xlHAjFBSW_FL9flmu8CJziAw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from google.colab import files
import io
data_to_load = files.upload()

class LogisticRegression:

  def __init__(self,X,Y):
    self.X = X
    self.Y = Y

  def sigmoid(self,z):
    return 1/(1+np.exp(-z))

  def cost(self,A,Y):
    return -np.sum(Y*np.log(A)+(1-Y)*np.log(1-A))/A.shape[0]

  def plot_cost(self,num_iterations,costs):
    n = np.arange(0,num_iterations,100)
    plt.plot(n,costs)
    plt.xlabel('num iterations')
    plt.ylabel('cost')  

  def fit(self,num_iterations,print_cost=False):
    b = np.ones((self.X.shape[0],1))
    self.X = np.concatenate((b,self.X),axis=1)
    self.W = np.zeros(self.X.shape[1])
    costs = []

    for i in range(num_iterations):
      A = self.sigmoid(self.X.dot(self.W))
      cost = self.cost(A,self.Y)
      invH = np.linalg.pinv((self.X.T.dot(self.X))*(A.dot(1-A)))
      gradient = (A-self.Y).dot(self.X)
      self.W = self.W-invH.dot(gradient)

      if i%100==0:
        costs.append(cost)
        if print_cost:
          print('Cost after {} iterations is {}'.format(i,cost))

    self.plot_cost(num_iterations,costs)

    return self

  def predict(self,X):
    b = np.ones((X.shape[0],1))
    A = self.sigmoid(np.concatenate((b,X),axis=1).dot(self.W))
    predictions = np.zeros(A.shape[0])

    for i in range(len(A)):
      if A[i]>=0.5:
        predictions[i]=1

    return predictions

train1 = pd.read_csv(io.BytesIO(data_to_load['ds1_train.csv']))
test1 = pd.read_csv(io.BytesIO(data_to_load['ds1_test.csv']))
train2 = pd.read_csv(io.BytesIO(data_to_load['ds2_train.csv']))
test2 = pd.read_csv(io.BytesIO(data_to_load['ds2_test.csv']))

x_train1 = train1[['x_1','x_2']]
y_train1 = train1['y']
x_test1 = test1[['x_1','x_2']]
y_test1 = test1['y']

"""DataSet 1"""

lr = LogisticRegression(x_train1,y_train1)
lr.fit(2500,True)

train_predict1 = lr.predict(x_train1)
test_predict1 = lr.predict(x_test1)

print('trainig accuracy:{}'.format(sum(train_predict1==y_train1)/y_train1.shape[0]))
print('test accuracy:{}'.format(sum(test_predict1==y_test1)/y_test1.shape[0]))

"""DataSets 2"""

x_train2 = train2[['x_1','x_2']]
y_train2 = train2['y']
x_test2 = test2[['x_1','x_2']]
y_test2 = test2['y']

lr = LogisticRegression(x_train2,y_train2)
lr.fit(3500,True)

train_predict2 = lr.predict(x_train2)
test_predict2 = lr.predict(x_test2)

print('trainig accuracy:{}'.format(sum(train_predict2==y_train2)/y_train2.shape[0]))
print('test accuracy:{}'.format(sum(test_predict2==y_test2)/y_test2.shape[0]))

